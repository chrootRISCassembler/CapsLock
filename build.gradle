/*
    Copyright (C) 2018 RISCassembler

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.
    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

import java.awt.Desktop
import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardCopyOption
import java.time.LocalDateTime

group 'CapsLock'
version '2.0.1'

apply plugin: 'java'
sourceCompatibility = 1.8

apply plugin: "groovy"
compileGroovy.enabled = false

apply plugin: 'application'
mainClassName = 'capslock.capslock.main.CapsLock'
startScripts.enabled = false
distZip.enabled = false
distTar.enabled = false

apply plugin: 'com.github.johnrengelman.shadow'
startShadowScripts.enabled = false
shadowDistTar.enabled = false
shadowDistZip.enabled = false

repositories {
    mavenCentral()
    jcenter()

    flatDir{
        dirs 'lib'
    }
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.2'
    }
}

dependencies {
    compile group: 'org.json', name: 'json', version:  '+'
    testCompile 'org.codehaus.groovy:groovy-all:2.5.0-beta-2'
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
    testCompile group: "org.testfx", name: "testfx-core", version: "4.0.8-alpha"
    testCompile group: 'org.testfx', name: 'testfx-spock', version: '4.0.12-alpha'

    compile name: "file_checker"
    compile name: "trivial_logger"
}

tasks.withType(JavaCompile){
    options.encoding = 'UTF-8'
}

processResources.doLast {
    def buildInfoFile = new File(processResources.destinationDir.path + '/BuildInfo.txt')
    buildInfoFile.bytes = []
    buildInfoFile << 'version : ' + version + '\n'
    buildInfoFile << 'git_commit_hash : ' +  'git rev-parse HEAD'.execute().text.trim()  + '\n'
    buildInfoFile << 'date : ' + LocalDateTime.now()
}

jar{
    manifest{
        attributes 'Main-Class': mainClassName
    }
    println version
}

task cpResources(type : Copy){
    from 'src/main/resources'
    into 'build/classes/java/main/capslock/capslock/main'
}

run {
    println("Current directory is " + workingDir)
    tasks.cpResources.execute()
    workingDir = '../TestEnv'
    println("cd to the testing environment : " + workingDir)
}

test{
}

compileJava.doFirst {
    def libDir = Paths.get(System.getProperty("user.dir") + "/lib/")
    if (Files.notExists(libDir)) {
        Files.createDirectory(libDir)
    }

    def file_checkerPath = Paths.get(System.getProperty("user.dir") + "/lib/file_checker.jar")
    if (Files.notExists(file_checkerPath)) {
        println "Downloading file_checker.jar ..."
        try {
            URL website = new URL("https://github.com/chrootRISCassembler/dependence/raw/master/file_checker-1.0.0-SNAPSHOT.jar")
            InputStream inStream = website.openStream()
            Files.copy(inStream, file_checkerPath, StandardCopyOption.REPLACE_EXISTING)

            println "Download succeeded "
        } catch (Exception ex) {
            println "Download failed"
            throw ex
        }
    }

    def trivial_loggerPath = Paths.get(System.getProperty("user.dir") + "/lib/trivial_logger.jar")
    if (Files.notExists(trivial_loggerPath)) {
        println "Downloading trivial_logger.jar ..."
        try {
            URL website = new URL("https://github.com/chrootRISCassembler/dependence/raw/master/trivial_logger-1.0.0-SNAPSHOT.jar")
            InputStream inStream = website.openStream()
            Files.copy(inStream, trivial_loggerPath, StandardCopyOption.REPLACE_EXISTING)

            println "Download succeeded "
        } catch (Exception ex) {
            println "Download failed"
            throw ex
        }
    }
}

task forceUpdateLib{
    doLast {
        println "force update library"

        def libDir = Paths.get(System.getProperty("user.dir") + "/lib/")
        if (Files.notExists(libDir)) {
            Files.createDirectory(libDir)
        }

        println "Downloading file_checker.jar ..."
        try {
            URL website = new URL("https://github.com/chrootRISCassembler/dependence/raw/master/file_checker-1.0.0-SNAPSHOT.jar")
            InputStream inStream = website.openStream()
            def file_checkerPath = Paths.get(System.getProperty("user.dir") + "/lib/file_checker.jar")
            Files.copy(inStream, file_checkerPath, StandardCopyOption.REPLACE_EXISTING)
            println "Download succeeded "
        } catch (Exception ex) {
            println "Download failed"
            throw ex
        }

        println "Downloading trivial_logger.jar ..."
        try {
            URL website = new URL("https://github.com/chrootRISCassembler/dependence/raw/master/trivial_logger-1.0.0-SNAPSHOT.jar")
            InputStream inStream = website.openStream()
            def trivial_loggerPath = Paths.get(System.getProperty("user.dir") + "/lib/trivial_logger.jar")
            Files.copy(inStream, trivial_loggerPath, StandardCopyOption.REPLACE_EXISTING)
            println "Download succeeded "
        } catch (Exception ex) {
            println "Download failed"
            throw ex
        }
    }
}

task game_infoPackageJar(type: Jar) {
    from(sourceSets.main.output) {
        include 'capslock/game_info/**'
    }
    version = '1.0.0-SNAPSHOT'
    baseName = 'game_info'
}

task game_infoJavadocJar(type: Jar, dependsOn: javadoc){
    classifier = 'javadoc'
    baseName = 'game_info'
    from javadoc.destinationDir
    version = '1.0.0-SNAPSHOT'
}

javadoc {
    include 'game_info/*'

    options.charSet = 'UTF-8'
    options.encoding = 'UTF-8'
    options.links "https://docs.oracle.com/javase/jp/8/docs/api/"

    doLast{
        //デフォルトブラウザで生成したjavadocを自動で開く
        def userDir = System.getProperty("user.dir")
        def indexURI = new URI(userDir.replace('\\', '/') + "/build/docs/javadoc/index.html")
        Desktop.getDesktop().browse(indexURI)
    }
}

artifacts {
    archives game_infoPackageJar
    archives game_infoJavadocJar
}